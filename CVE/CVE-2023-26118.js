
// Define controllers.
class AppCtrl {
  url = null;
  urlInput = null;
  urlInputController = null;
  urlInputValidators = null;
  duration = '(N/A)';

  constructor() {
    this.setUrlWithSlashesPowerOf2Exponent(0);
  }

  $postLink() {
    // Remove the default validators (which include the URL validator) to prevent
    // the browser's freezing during entering a value and run validation on demand.
    this.urlInputController = this.urlInput.controller('ngModel');
    this.urlInputValidators = this.urlInputController.$validators;

    this.urlInputController.$validators = {};
  }

  setUrlWithSlashesPowerOf2Exponent(exponent) {
    this.url = `scheme:${'/'.repeat(2 ** exponent)}`;
  }

  validateUrl() {
    try {
      // Temporarily restore the default validators (which include the URL validator)
      // and run validation on demand (while measuring the time it takes).
      this.urlInputController.$validators = this.urlInputValidators;

      const start = performance.now();
      this.urlInputController.$validate();
      const end = performance.now();

      this.urlInputController.$validators = {};
      this.duration = `${((end - start) / 1000).toFixed(2)} seconds`;
    } catch (err) {
      const isChromeBrowser = navigator.userAgent.includes('Chrome');
      const isTooMuchRecursionError = `${err}` === 'InternalError: too much recursion';

      let message = `The operation failed with the following error:\n\n    ${err}`
      if (!isChromeBrowser && isTooMuchRecursionError) {
        message += '\n\nTo avoid this error, it is recommended to run this test case in the Chrome browser.';
      }

      alert(message);
      console.error(err);

      this.duration = '(APP CRASHED)';
    }
  }
}

// Define and configure the app.
angular
    .module('app', [])
    .controller('AppCtrl', AppCtrl);
