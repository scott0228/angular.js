'use strict';

describe('CVE-2022-25844 ReDoS vulnerability test', function() {
  var $filter;

  beforeEach(inject(function(_$filter_) {
    $filter = _$filter_;
  }));

  describe('currency filter ReDoS', function() {

    it('should handle normal currency formatting without performance issues', function() {
      var currency = $filter('currency');
      var startTime = Date.now();
      var result = currency(100, '$', 2);
      var endTime = Date.now();

      expect(result).toBe('$100.00');
      expect(endTime - startTime).toBeLessThan(100); // Should complete within 100ms
    });

    it('should be vulnerable to ReDoS attack with malicious currency symbol (before fix)', function() {
      var currency = $filter('currency');
      // This creates a malicious currency symbol that could cause ReDoS
      var maliciousCurrencySymbol = '';

      var startTime = Date.now();
      var result = currency(100, maliciousCurrencySymbol, 2);
      var endTime = Date.now();

      // Before fix, this might take very long time due to ReDoS
      // We set a reasonable timeout for testing
      expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second
    });

    it('should handle currency symbol with multiple spaces that could trigger ReDoS', function() {
      var currency = $filter('currency');

      // Create a pattern that might trigger ReDoS in the regex /\s*\u00A4\s*/g
      // When currencySymbol is empty, it uses this vulnerable regex
      var startTime = Date.now();
      var result = currency(100, '', 2); // Empty currency symbol triggers the vulnerable regex
      var endTime = Date.now();

      expect(endTime - startTime).toBeLessThan(100); // Should complete quickly
    });

    it('should test with custom locale pattern that has spaces in posPre/posSuf', function() {
      var currency = $filter('currency');

      // Mock a locale with spaces that could cause issues
      inject(function($locale) {
        var originalPattern = $locale.NUMBER_FORMATS.PATTERNS[1];

        // Save original for restoration
        var originalPosPre = originalPattern.posPre;
        var originalPosSuf = originalPattern.posSuf;

        try {
          // Set patterns that might trigger ReDoS
          originalPattern.posPre = '   \u00A4   '; // Spaces around currency symbol
          originalPattern.posSuf = '   ';

          var startTime = Date.now();
          var result = currency(100, '', 2); // Empty currency symbol
          var endTime = Date.now();

          expect(endTime - startTime).toBeLessThan(100);
        } finally {
          // Restore original patterns
          originalPattern.posPre = originalPosPre;
          originalPattern.posSuf = originalPosSuf;
        }
      });
    });

    it('should handle pathological input that exploits ReDoS vulnerability', function() {
      var currency = $filter('currency');

      // This test simulates the actual CVE scenario
      inject(function($locale) {
        var originalPattern = $locale.NUMBER_FORMATS.PATTERNS[1];
        var originalPosPre = originalPattern.posPre;

        try {
          // Create a pattern similar to the CVE demo
          // Multiple spaces that could cause catastrophic backtracking
          var maliciousPosPre = Array(1000).join(' ') + '\u00A4' + Array(1000).join(' ');
          originalPattern.posPre = maliciousPosPre;

          var startTime = Date.now();
          var result = currency(100, '', 2); // This triggers the vulnerable regex
          var endTime = Date.now();

          // Before fix, this could take extremely long time
          expect(endTime - startTime).toBeLessThan(1000); // Should not hang

        } finally {
          originalPattern.posPre = originalPosPre;
        }
      });
    });
  });
});
