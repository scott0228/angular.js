'use strict';

describe('CVE-2022-25844 Performance Benchmark', function() {
  var $filter, $locale;

  beforeEach(inject(function(_$filter_, _$locale_) {
    $filter = _$filter_;
    $locale = _$locale_;
  }));

  describe('currency filter performance', function() {

    it('should handle normal patterns efficiently', function() {
      var currency = $filter('currency');
      var iterations = 1000;
      var startTime = Date.now();

      for (var i = 0; i < iterations; i++) {
        currency(100, '$', 2);
      }

      var endTime = Date.now();
      var avgTime = (endTime - startTime) / iterations;

      expect(avgTime).toBeLessThan(1); // Should be very fast (< 1ms per call on average)
    });

    it('should handle empty currency symbol patterns efficiently', function() {
      var currency = $filter('currency');
      var pattern = $locale.NUMBER_FORMATS.PATTERNS[1];
      var originalPosPre = pattern.posPre;

      try {
        // Set a pattern with reasonable amount of spaces
        pattern.posPre = '    \u00A4    ';

        var iterations = 1000;
        var startTime = Date.now();

        for (var i = 0; i < iterations; i++) {
          currency(100, '', 2); // This triggers the regex
        }

        var endTime = Date.now();
        var avgTime = (endTime - startTime) / iterations;

        expect(avgTime).toBeLessThan(1); // Should still be fast

      } finally {
        pattern.posPre = originalPosPre;
      }
    });

    it('should handle patterns with maximum allowed spaces efficiently', function() {
      var currency = $filter('currency');
      var pattern = $locale.NUMBER_FORMATS.PATTERNS[1];
      var originalPosPre = pattern.posPre;

      try {
        // Test with the maximum spaces our regex allows (50)
        var maxSpaces = Array(51).join(' '); // 50 spaces
        pattern.posPre = maxSpaces + '\u00A4' + maxSpaces;

        var startTime = Date.now();
        var result = currency(100, '', 2);
        var endTime = Date.now();

        expect(endTime - startTime).toBeLessThan(10); // Should complete within 10ms
        expect(result).toBe('100.00'); // Should still work correctly

      } finally {
        pattern.posPre = originalPosPre;
      }
    });

    it('should handle patterns with excessive spaces safely (ReDoS prevention)', function() {
      var currency = $filter('currency');
      var pattern = $locale.NUMBER_FORMATS.PATTERNS[1];
      var originalPosPre = pattern.posPre;

      try {
        // Test with more spaces than our regex allows (this would cause ReDoS in the old version)
        var excessiveSpaces = Array(1000).join(' '); // 999 spaces
        pattern.posPre = excessiveSpaces + '\u00A4' + excessiveSpaces;

        var startTime = Date.now();
        var result = currency(100, '', 2);
        var endTime = Date.now();

        // With our fix, this should still be reasonably fast
        // (it might not remove all spaces, but it won't hang)
        expect(endTime - startTime).toBeLessThan(50); // Should complete within 50ms

      } finally {
        pattern.posPre = originalPosPre;
      }
    });
  });
});
